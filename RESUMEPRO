import tkinter as tk
from tkinter import ttk  # –ò—Å–ø–æ–ª—å–∑—É–µ–º themed Tkinter –≤–∏–¥–∂–µ—Ç—ã
from tkinter import scrolledtext # –í–∏–¥–∂–µ—Ç –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
from tkinter import filedialog   # –î–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
from tkinter import messagebox   # –î–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
import ttkbootstrap as ttkb
from ttkbootstrap.constants import * # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∏–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π

# --- –§—É–Ω–∫—Ü–∏–∏ —è–¥—Ä–∞ (—Å–ª–µ–≥–∫–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) ---

def generate_resume_text(data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö.
    –£–±—Ä–∞–Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–∞ rich, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è GUI –∏ —Ñ–∞–π–ª–∞.
    """
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    name = data.get('–ò–º—è', '')
    profession = data.get('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', '')
    experience = data.get('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '')
    skills = data.get('–ù–∞–≤—ã–∫–∏', '')
    education = data.get('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '')
    contact = data.get('–ö–æ–Ω—Ç–∞–∫—Ç—ã', '')

    resume = f"""
–†–ï–ó–Æ–ú–ï
===========================

–ò–º—è: {name}
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}

–û–ü–´–¢ –†–ê–ë–û–¢–´:
{experience}

–ù–ê–í–´–ö–ò:
{skills}

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
{education}

–ö–û–ù–¢–ê–ö–¢–´:
{contact}

===========================
"""
    return resume.strip() # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ

# --- –ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

class ResumeApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ResumePro Modern")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        self.root.geometry("700x750")

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ ---
        self.create_widgets()

    def create_widgets(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Frame –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="‚ú® ResumePro ‚ú®", font=("Helvetica", 18, "bold"), bootstyle=PRIMARY)
        title_label.pack(pady=(0, 20)) # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É

        # --- –ü–æ–ª—è –≤–≤–æ–¥–∞ ---
        input_frame = ttk.Frame(main_frame)
        input_frame.pack(fill=tk.X, pady=10)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–µ–π–±–ª–æ–≤ –∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_frame.columnconfigure(1, weight=1) # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—é –≤–≤–æ–¥–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è

        # –ò–º—è
        ttk.Label(input_frame, text="–ò–º—è:", width=15).grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_name = ttk.Entry(input_frame, bootstyle=INFO, width=50)
        self.entry_name.grid(row=0, column=1, padx=5, pady=5, sticky=tk.EW)

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
        ttk.Label(input_frame, text="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:", width=15).grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_profession = ttk.Entry(input_frame, bootstyle=INFO, width=50)
        self.entry_profession.grid(row=1, column=1, padx=5, pady=5, sticky=tk.EW)

        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)
        ttk.Label(input_frame, text="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", width=15).grid(row=2, column=0, padx=5, pady=5, sticky=tk.NW) # NW = NorthWest (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)
        self.text_experience = scrolledtext.ScrolledText(input_frame, height=10, width=50, wrap=tk.WORD, relief=tk.SOLID, borderwidth=1)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ —Ä–∞–º–∫–µ ScrolledText (–Ω–µ–º–Ω–æ–≥–æ —Ö–∞–∫, —Ç.–∫. ttkbootstrap –Ω–∞–ø—Ä—è–º—É—é –Ω–µ —Å—Ç–∏–ª–∏–∑—É–µ—Ç –µ–≥–æ)
        style = ttkb.Style()
        border_color = style.colors.info # –ë–µ—Ä–µ–º —Ü–≤–µ—Ç —Å—Ç–∏–ª—è INFO
        self.text_experience.configure(bd=1, relief="solid", highlightthickness=1, highlightcolor=border_color, highlightbackground=border_color)
        self.text_experience.grid(row=2, column=1, padx=5, pady=5, sticky=tk.EW)

        # –ù–∞–≤—ã–∫–∏
        ttk.Label(input_frame, text="–ù–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ ,):", width=15).grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_skills = ttk.Entry(input_frame, bootstyle=INFO, width=50)
        self.entry_skills.grid(row=3, column=1, padx=5, pady=5, sticky=tk.EW)

        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        ttk.Label(input_frame, text="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:", width=15).grid(row=4, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_education = ttk.Entry(input_frame, bootstyle=INFO, width=50)
        self.entry_education.grid(row=4, column=1, padx=5, pady=5, sticky=tk.EW)

        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        ttk.Label(input_frame, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã:", width=15).grid(row=5, column=0, padx=5, pady=5, sticky=tk.W)
        self.entry_contact = ttk.Entry(input_frame, bootstyle=INFO, width=50)
        self.entry_contact.grid(row=5, column=1, padx=5, pady=5, sticky=tk.EW)

        # --- –ö–Ω–æ–ø–∫–∏ ---
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)

        generate_button = ttk.Button(button_frame, text="üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.generate_and_save, bootstyle=SUCCESS)
        generate_button.pack(side=tk.LEFT, padx=10)

        clear_button = ttk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command=self.clear_fields, bootstyle=WARNING)
        clear_button.pack(side=tk.LEFT, padx=10)

        # --- –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) ---
        preview_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", padding=10, bootstyle=INFO)
        preview_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))

        self.text_preview = scrolledtext.ScrolledText(preview_frame, height=15, wrap=tk.WORD, state=tk.DISABLED) # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.text_preview.pack(fill=tk.BOTH, expand=True)


    def get_user_data_from_gui(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ GUI."""
        # .strip() —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        # .get("1.0", tk.END + "-1c") —á–∏—Ç–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ Text –≤–∏–¥–∂–µ—Ç–∞
        data = {
            "–ò–º—è": self.entry_name.get().strip(),
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": self.entry_profession.get().strip(),
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": self.text_experience.get("1.0", tk.END + "-1c").strip(),
            "–ù–∞–≤—ã–∫–∏": self.entry_skills.get().strip(),
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": self.entry_education.get().strip(),
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã": self.entry_contact.get().strip(),
        }
        return data

    def clear_fields(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        self.entry_name.delete(0, tk.END)
        self.entry_profession.delete(0, tk.END)
        self.text_experience.delete("1.0", tk.END)
        self.entry_skills.delete(0, tk.END)
        self.entry_education.delete(0, tk.END)
        self.entry_contact.delete(0, tk.END)
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.text_preview.config(state=tk.NORMAL) # –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.text_preview.delete("1.0", tk.END)
        self.text_preview.config(state=tk.DISABLED) # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞", "–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã.")


    def generate_and_save(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."""
        user_data = self.get_user_data_from_gui()

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –∏–º—è –≤–≤–µ–¥–µ–Ω–æ
        if not user_data["–ò–º—è"]:
            messagebox.showwarning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –≤–∞—à–µ –∏–º—è.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
        resume_content = generate_resume_text(user_data)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
        self.text_preview.config(state=tk.NORMAL) # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        self.text_preview.delete("1.0", tk.END)   # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç
        self.text_preview.insert(tk.END, resume_content) # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        self.text_preview.config(state=tk.DISABLED) # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_filename = f"resume_{user_data['–ò–º—è'].replace(' ', '_')}.txt"
        filepath = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–∫...",
            initialfile=default_filename,
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–∞–π–ª (–Ω–µ –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞")
        if filepath:
            try:
                with open(filepath, "w", encoding="utf-8") as file:
                    file.write(resume_content)
                messagebox.showinfo("–£—Å–ø–µ—Ö!", f"‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª:\n{filepath}")
            except IOError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
        else:
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ttkb.Window –≤–º–µ—Å—Ç–æ tk.Tk() –¥–ª—è —Ç–µ–º
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: cosmo, flatly, journal, litera, lumen, minty, pulse, sandstone,
    # united, yeti, cyborg, darkly, solar, superhero (—Ç–µ–º–Ω—ã–µ)
    root = ttkb.Window(themename="superhero") # –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã!
    app = ResumeApp(root)
    root.mainloop()